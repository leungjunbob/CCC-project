PUT _ingest/pipeline/basic_ai_word_filter
{
  "description": "Basic filter for 'ai' word",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": """
          // Default to removing document
          ctx.remove_me = true;
          
          // Check content for standalone 'ai' word
          if (ctx.containsKey("content") && ctx.content != null) {
            // Get content and add space padding for boundary checks
            String content = " " + ctx.content.toLowerCase() + " ";
            
            // Check for 'ai' as standalone word (with space boundaries)
            if (content.indexOf(" ai ") >= 0) {
              ctx.remove_me = false;
            }
            
            // Check for 'ai' at end of sentence
            if (content.indexOf(" ai.") >= 0 || 
                content.indexOf(" ai,") >= 0 || 
                content.indexOf(" ai!") >= 0 || 
                content.indexOf(" ai?") >= 0 || 
                content.indexOf(" ai:") >= 0 || 
                content.indexOf(" ai;") >= 0) {
              ctx.remove_me = false;
            }
            
            // Check for 'a.i' variants
            if (content.indexOf(" a.i ") >= 0 || 
                content.indexOf(" a.i.") >= 0 || 
                content.indexOf(" a.i,") >= 0 || 
                content.indexOf(" a.i:") >= 0 || 
                content.indexOf(" a.i;") >= 0 || 
                content.indexOf(" a.i!") >= 0 || 
                content.indexOf(" a.i?") >= 0) {
              ctx.remove_me = false;
            }
            
            // Check for uppercase variants
            if (content.indexOf(" AI ") >= 0 || 
                content.indexOf(" A.I ") >= 0 || 
                content.indexOf(" A.I.") >= 0) {
              ctx.remove_me = false;
            }
          }
          
          // Check title too with same approach
          if (ctx.containsKey("title") && ctx.title != null && ctx.remove_me) {
            // Get title and add space padding
            String title = " " + ctx.title.toLowerCase() + " ";
            
            // Same checks for title
            if (title.indexOf(" ai ") >= 0 || 
                title.indexOf(" ai.") >= 0 || 
                title.indexOf(" ai,") >= 0 || 
                title.indexOf(" ai!") >= 0 || 
                title.indexOf(" ai?") >= 0 || 
                title.indexOf(" ai:") >= 0 || 
                title.indexOf(" ai;") >= 0 || 
                title.indexOf(" a.i ") >= 0 || 
                title.indexOf(" a.i.") >= 0 || 
                title.indexOf(" AI ") >= 0 || 
                title.indexOf(" A.I ") >= 0 || 
                title.indexOf(" A.I.") >= 0) {
              ctx.remove_me = false;
            }
          }
        """
      }
    },
    {
      "drop": {
        "if": "ctx.remove_me == true",
        "description": "Remove documents that don't contain 'ai' as a standalone word"
      }
    }
  ]
}

PUT _ingest/pipeline/scalable_convert_arrays
{
  "description": "Convert array fields to single values",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": """
          // Process fields that exist in original data
          def fieldsToConvert = ["author", "content", "id", "url", "created_utc", "title", "subreddit"];
          for (def field : fieldsToConvert) {
            if (ctx.containsKey(field) && ctx[field] instanceof List && ctx[field].size() > 0) {
              // Convert fields to single values
              ctx[field] = ctx[field][0];
            }
          }
          
          // Add processed field
          ctx.processed = true;
        """
      }
    }
  ]
}

PUT _ingest/pipeline/scalable_add_cleaned_content
{
  "description": "Add cleaned_content field",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": """
          // Create cleaned_content from content
          if (ctx.containsKey("content") && ctx.content != null) {
            ctx.cleaned_content = ctx.content;
          }
        """
      }
    }
  ]
}

PUT _ingest/pipeline/scalable_to_lowercase
{
  "description": "Convert cleaned_content to lowercase",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": """
          // Ensure cleaned_content field exists
          if (ctx.containsKey("cleaned_content") && ctx.cleaned_content != null) {
            ctx.cleaned_content = ctx.cleaned_content.toLowerCase();
          }
        """
      }
    }
  ]
}

PUT _ingest/pipeline/scalable_remove_html
{
  "description": "Remove HTML tags",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": """
          // Ensure cleaned_content field exists
          if (ctx.containsKey("cleaned_content") && ctx.cleaned_content != null) {
            String content = ctx.cleaned_content;
            
            // Replace common HTML tags
            def htmlTags = ["<p>", "</p>", "<a", "</a>", "<span", "</span>", 
                           "<div", "</div>", "<br", "<hr", "<img", 
                           "<h1", "</h1>", "<h2", "</h2>", "<h3", "</h3>", 
                           "<h4", "</h4>", "<h5", "</h5>", "<h6", "</h6>", 
                           "<ul", "</ul>", "<li", "</li>", "<ol", "</ol>", 
                           "<strong", "</strong>", "<em", "</em>", 
                           "<b", "</b>", "<i", "</i>", "<u", "</u>"];
                           
            // Replace each tag individually
            for (def tag : htmlTags) {
              if (content.contains(tag)) {
                content = content.replace(tag, " ");
              }
            }
            
            // Replace any remaining angle brackets
            if (content.contains(">")) content = content.replace(">", " ");
            if (content.contains("<")) content = content.replace("<", " ");
            
            ctx.cleaned_content = content;
          }
        """
      }
    }
  ]
}

PUT _ingest/pipeline/scalable_remove_punctuation
{
  "description": "Remove punctuation marks",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": """
          // Ensure cleaned_content field exists
          if (ctx.containsKey("cleaned_content") && ctx.cleaned_content != null) {
            String content = ctx.cleaned_content;
            
            // Define all punctuation marks to replace
            def punctuations = [".", ",", "!", "?", ":", ";", "-", "_", 
                               "(", ")", "[", "]", "{", "}", "\"", "'", 
                               "/", "\\\\", "@", "#", "$", "%", "^", "&", 
                               "*", "+", "=", "|", "~", "`"];
            
            // Replace each punctuation mark individually
            for (def punc : punctuations) {
              if (content.contains(punc)) {
                content = content.replace(punc, " ");
              }
            }
            
            ctx.cleaned_content = content;
          }
        """
      }
    }
  ]
}

PUT _ingest/pipeline/scalable_clean_spaces
{
  "description": "Clean extra spaces",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": """
          // Ensure cleaned_content field exists
          if (ctx.containsKey("cleaned_content") && ctx.cleaned_content != null) {
            String content = ctx.cleaned_content;
            
            // Replace multiple spaces with single space
            while (content.contains("  ")) {
              content = content.replace("  ", " ");
            }
            
            // Remove leading and trailing spaces
            ctx.cleaned_content = content.trim();
          }
        """
      }
    }
  ]
}

PUT _ingest/pipeline/basic_master_pipeline
{
  "description": "Master pipeline with basic AI word filtering",
  "processors": [
    {
      "pipeline": {
        "name": "scalable_convert_arrays"
      }
    },
    {
      "pipeline": {
        "name": "basic_ai_word_filter"
      }
    },
    {
      "pipeline": {
        "name": "scalable_add_cleaned_content"
      }
    },
    {
      "pipeline": {
        "name": "scalable_to_lowercase"
      }
    },
    {
      "pipeline": {
        "name": "scalable_remove_html"
      }
    },
    {
      "pipeline": {
        "name": "scalable_remove_punctuation"
      }
    },
    {
      "pipeline": {
        "name": "scalable_clean_spaces"
      }
    }
  ]
}

PUT reddit_basic_ai_only
{
  "mappings": {
    "properties": {
      "id": { "type": "keyword" },
      "author": { "type": "keyword" },
      "title": { "type": "text", "fields": { "keyword": { "type": "keyword" } } },
      "content": { "type": "text" },
      "cleaned_content": { "type": "text" },
      "created_utc": { "type": "date" },
      "url": { "type": "keyword" },
      "subreddit": { "type": "keyword" },
      "processed": { "type": "boolean" }
    }
  }
}

POST _reindex?wait_for_completion=false
{
  "source": {
    "index": "reddit_public"
  },
  "dest": {
    "index": "reddit_basic_ai_only",
    "pipeline": "basic_master_pipeline"
  }
}